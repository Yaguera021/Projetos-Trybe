{"files":{"src/middlewares/productValidation.js":{"language":"javascript","mutants":[{"id":"13","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":21},"start":{"column":47,"line":3}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":19},"start":{"column":14,"line":6}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":10},"start":{"column":9,"line":10}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":10},"start":{"column":9,"line":10}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":13},"start":{"column":44,"line":10}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":48,"line":13},"start":{"column":16,"line":13}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":48,"line":13},"start":{"column":16,"line":13}}},{"id":"25","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":16},"start":{"column":50,"line":13}}},{"id":"17","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":62,"line":8},"start":{"column":24,"line":8}}},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":10},"start":{"column":32,"line":10}}},{"id":"24","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":13},"start":{"column":39,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":65,"line":18},"start":{"column":40,"line":18}}},{"id":"27","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":25},"start":{"column":18,"line":23}}}],"source":"const { validateProduct } = require('./validations/validations');\n\nconst productValidation = (req, res, next) => {\n  const error = validateProduct(req.body);\n\n  if (error) {\n    let statusCode = 500;\n    let errorMessage = 'An unknown validation error occurred';\n\n    if (error.message.includes('require')) {\n      statusCode = 400;\n      errorMessage = error.message;\n    } else if (error.message.includes('length')) {\n      statusCode = 422;\n      errorMessage = error.message;\n    }\n\n    return res.status(statusCode).json({ message: errorMessage });\n  }\n  next();\n};\n\nmodule.exports = {\n  productValidation,\n};"},"src/middlewares/saleValidation.js":{"language":"javascript","mutants":[{"id":"28","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":15},"start":{"column":44,"line":3}}},{"id":"29","mutatorName":"MethodExpression","replacement":"sale.map(validateSale)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":5},"start":{"column":18,"line":5}}},{"id":"34","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":8},"start":{"column":7,"line":8}}},{"id":"35","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":8},"start":{"column":7,"line":8}}},{"id":"36","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":22,"line":8}}},{"id":"38","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":11},"start":{"column":7,"line":11}}},{"id":"39","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":11},"start":{"column":7,"line":11}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":13},"start":{"column":21,"line":11}}},{"id":"30","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":82,"line":6},"start":{"column":37,"line":6}}},{"id":"31","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":6},"start":{"column":71,"line":6}}},{"id":"32","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":80,"line":7},"start":{"column":36,"line":7}}},{"id":"33","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":7},"start":{"column":70,"line":7}}},{"id":"37","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":9},"start":{"column":33,"line":9}}},{"id":"41","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":12},"start":{"column":33,"line":12}}},{"id":"42","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":19},"start":{"column":18,"line":17}}}],"source":"const { validateSale } = require('./validations/validations');\n\nconst saleValidation = (req, res, next) => {\n  const sale = req.body;\n  const errors = sale.map(validateSale).filter(Boolean);\n  const requiredError = errors.find((error) => error.message.includes('required'));\n  const greaterError = errors.find((error) => error.message.includes('greater'));\n  if (requiredError) {\n    return res.status(400).json({ message: requiredError.message });\n  }\n  if (greaterError) {\n    return res.status(422).json({ message: greaterError.message });\n  }\n  next();\n};\n\nmodule.exports = {\n  saleValidation,\n};\n"},"src/middlewares/validations/validations.js":{"language":"javascript","mutants":[{"id":"55","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":4}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"58","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":7},"start":{"column":10,"line":7}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":14},"start":{"column":32,"line":10}}},{"id":"60","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":12},"start":{"column":7,"line":12}}},{"id":"61","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":12},"start":{"column":7,"line":12}}},{"id":"62","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":13},"start":{"column":10,"line":13}}},{"id":"63","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":19},"start":{"column":18,"line":16}}}],"source":"const { productSchema } = require('./schema');\nconst { saleSchema } = require('./schema');\n\nconst validateProduct = (product) => {\n  const { error } = productSchema.validate(product);\n  if (error) return error; \n  return false;\n};\n\nconst validateSale = (sale) => {\n  const { error } = saleSchema.validate(sale);\n  if (error) return error; \n  return false;\n};\n\nmodule.exports = {\n  validateProduct,\n  validateSale,\n};"},"src/models/sales.model.js":{"language":"javascript","mutants":[{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":34},"start":{"column":36,"line":24}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":66,"line":29}}},{"id":"98","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":8},"start":{"column":17,"line":4}}},{"id":"100","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":24,"line":19},"start":{"column":17,"line":15}}},{"id":"101","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":54,"line":20},"start":{"column":50,"line":20}}},{"id":"103","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":51,"line":25},"start":{"column":19,"line":25}}},{"id":"104","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":56,"line":26},"start":{"column":54,"line":26}}},{"id":"105","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":97,"line":28},"start":{"column":20,"line":28}}},{"id":"107","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":30},"start":{"column":40,"line":30}}},{"id":"109","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":37},"start":{"column":17,"line":37}}},{"id":"110","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":54,"line":38},"start":{"column":50,"line":38}}},{"id":"111","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":47},"start":{"column":18,"line":42}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":2,"line":12},"start":{"column":33,"line":3}}},{"id":"99","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":2,"line":22},"start":{"column":36,"line":14}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'affectedRows')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":2,"line":40},"start":{"column":34,"line":36}}}],"source":"const connection = require('./connection');\n\nconst getAllSales = async () => {\n  const QUERY = `SELECT sp.sale_id as saleId, \n  sp.product_id as productId, \n  sp.quantity, s.date\n  FROM sales_products sp\n  INNER JOIN sales s ON sp.sale_id = s.id`;\n  const [sales] = await connection.execute(QUERY);\n\n  return sales;\n};\n\nconst getSalesById = async (id) => {\n  const QUERY = `SELECT s.date, \n  sp.product_id as productId, sp.quantity\n  FROM sales_products sp\n  INNER JOIN sales s ON sp.sale_id = s.id\n  WHERE sp.sale_id = ?`;\n  const [sale] = await connection.execute(QUERY, [id]);\n  return sale;\n};\n\nconst createSale = async (sale) => {\n    const QUERY = 'INSERT INTO sales () VALUES ()';\n    const [result] = await connection.execute(QUERY, []);\n    const saleId = result.insertId;\n    const QUERY2 = 'INSERT INTO sales_products (sale_id, product_id, quantity) VALUES (?, ?, ?)';\n    const products = sale.map(async ({ productId, quantity }) => {\n      await connection.execute(QUERY2, [saleId, productId, quantity]);\n    });\n    await Promise.all(products);\n    return saleId;\n};\n\nconst deleteSale = async (id) => {\n  const QUERY = 'DELETE FROM sales WHERE id = ?';\n  const [sale] = await connection.execute(QUERY, [id]);\n  return sale;\n};\n\nmodule.exports = {\n  getAllSales,\n  getSalesById,\n  createSale,\n  deleteSale,\n};"},"src/services/products.service.js":{"language":"javascript","mutants":[{"id":"144","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":98,"line":25},"start":{"column":23,"line":25}}},{"id":"124","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":6},"start":{"column":10,"line":6}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":6},"start":{"column":20,"line":6}}},{"id":"131","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":89,"line":12},"start":{"column":26,"line":12}}},{"id":"132","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":12},"start":{"column":36,"line":12}}},{"id":"133","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":12},"start":{"column":55,"line":12}}},{"id":"134","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":85,"line":12},"start":{"column":66,"line":12}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":14},"start":{"column":10,"line":14}}},{"id":"136","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":14},"start":{"column":20,"line":14}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":20},"start":{"column":10,"line":20}}},{"id":"139","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":20},"start":{"column":20,"line":20}}},{"id":"145","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":95,"line":25},"start":{"column":32,"line":25}}},{"id":"146","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":25},"start":{"column":42,"line":25}}},{"id":"147","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":93,"line":25},"start":{"column":61,"line":25}}},{"id":"148","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":91,"line":25},"start":{"column":72,"line":25}}},{"id":"149","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":28},"start":{"column":10,"line":28}}},{"id":"150","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":28},"start":{"column":20,"line":28}}},{"id":"156","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":95,"line":33},"start":{"column":32,"line":33}}},{"id":"157","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":33},"start":{"column":42,"line":33}}},{"id":"158","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":93,"line":33},"start":{"column":61,"line":33}}},{"id":"159","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":91,"line":33},"start":{"column":72,"line":33}}},{"id":"160","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":36},"start":{"column":10,"line":36}}},{"id":"161","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":36},"start":{"column":20,"line":36}}},{"id":"162","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":36},"start":{"column":37,"line":36}}},{"id":"163","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":65,"line":36},"start":{"column":48,"line":36}}},{"id":"164","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":45},"start":{"column":18,"line":39}}},{"id":"123","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":2,"line":7},"start":{"column":28,"line":3}}},{"id":"126","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19","24"],"location":{"end":{"column":2,"line":15},"start":{"column":32,"line":9}}},{"id":"127","mutatorName":"BooleanLiteral","replacement":"product","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19","24"],"location":{"end":{"column":15,"line":12},"start":{"column":7,"line":12}}},{"id":"128","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19","24"],"location":{"end":{"column":15,"line":12},"start":{"column":7,"line":12}}},{"id":"129","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19","24"],"location":{"end":{"column":15,"line":12},"start":{"column":7,"line":12}}},{"id":"130","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","24"],"location":{"end":{"column":92,"line":12},"start":{"column":17,"line":12}}},{"id":"137","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":2,"line":21},"start":{"column":36,"line":17}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":29},"start":{"column":43,"line":23}}},{"id":"141","mutatorName":"BooleanLiteral","replacement":"productExists","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":21,"line":25},"start":{"column":7,"line":25}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":21,"line":25},"start":{"column":7,"line":25}}},{"id":"143","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["22"],"location":{"end":{"column":21,"line":25},"start":{"column":7,"line":25}}},{"id":"151","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21","23"],"location":{"end":{"column":2,"line":37},"start":{"column":37,"line":31}}},{"id":"152","mutatorName":"BooleanLiteral","replacement":"productExists","statusReason":"expected 'DELETED' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21","23"],"location":{"end":{"column":21,"line":33},"start":{"column":7,"line":33}}},{"id":"153","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'DELETED'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["23"],"coveredBy":["21","23"],"location":{"end":{"column":21,"line":33},"start":{"column":7,"line":33}}},{"id":"154","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'DELETED' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21","23"],"location":{"end":{"column":21,"line":33},"start":{"column":7,"line":33}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'DELETED' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":98,"line":33},"start":{"column":23,"line":33}}}],"source":"const { productsModel } = require('../models');\n\nconst getAll = async () => {\n  const products = await productsModel.getAll();\n\n  return { status: 'SUCCESSFUL', data: products };\n};\n\nconst findById = async (id) => {\n  const product = await productsModel.getById(id);\n\n  if (!product) { return { status: 'NOT_FOUND', data: { message: 'Product not found' } }; }\n\n  return { status: 'SUCCESSFUL', data: product };\n};\n\nconst addProduct = async (name) => {\n  const insertId = await productsModel.addProduct(name);\n  const product = await productsModel.getById(insertId);\n  return { status: 'CREATED', data: product };\n};\n\nconst updateProduct = async (id, name) => {\n  const productExists = await productsModel.getById(id);\n  if (!productExists) { return { status: 'NOT_FOUND', data: { message: 'Product not found' } }; }\n  \n  const product = await productsModel.updateProduct(id, name);\n  return { status: 'SUCCESSFUL', data: product };\n};\n\nconst deleteProduct = async (id) => {\n  const productExists = await productsModel.getById(id);\n  if (!productExists) { return { status: 'NOT_FOUND', data: { message: 'Product not found' } }; }\n\n  await productsModel.deleteProduct(id);\n  return { status: 'DELETED', data: { message: 'Product deleted' } };\n};\n\nmodule.exports = {\n  getAll,\n  findById,\n  addProduct,\n  updateProduct,\n  deleteProduct,\n};\n"},"src/services/sales.service.js":{"language":"javascript","mutants":[{"id":"183","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":21},"start":{"column":42,"line":19}}},{"id":"197","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":93,"line":36},"start":{"column":21,"line":36}}},{"id":"166","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":5},"start":{"column":10,"line":5}}},{"id":"167","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":5},"start":{"column":20,"line":5}}},{"id":"173","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":90,"line":11},"start":{"column":30,"line":11}}},{"id":"174","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":51,"line":11},"start":{"column":40,"line":11}}},{"id":"175","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":88,"line":11},"start":{"column":59,"line":11}}},{"id":"176","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":11},"start":{"column":70,"line":11}}},{"id":"177","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":13},"start":{"column":10,"line":13}}},{"id":"178","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":13},"start":{"column":20,"line":13}}},{"id":"180","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":80,"line":17},"start":{"column":29,"line":17}}},{"id":"184","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":20},"start":{"column":12,"line":20}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":20},"start":{"column":22,"line":20}}},{"id":"186","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":20},"start":{"column":41,"line":20}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":20},"start":{"column":52,"line":20}}},{"id":"188","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":30},"start":{"column":20,"line":24}}},{"id":"189","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":7,"line":29},"start":{"column":26,"line":26}}},{"id":"190","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":29},"start":{"column":37,"line":26}}},{"id":"191","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":31},"start":{"column":10,"line":31}}},{"id":"192","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":31},"start":{"column":20,"line":31}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":90,"line":36},"start":{"column":30,"line":36}}},{"id":"199","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":51,"line":36},"start":{"column":40,"line":36}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":88,"line":36},"start":{"column":59,"line":36}}},{"id":"201","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":36},"start":{"column":70,"line":36}}},{"id":"202","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":39},"start":{"column":10,"line":39}}},{"id":"203","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":39},"start":{"column":20,"line":39}}},{"id":"204","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":47},"start":{"column":18,"line":42}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25"],"location":{"end":{"column":2,"line":6},"start":{"column":30,"line":3}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":2,"line":14},"start":{"column":37,"line":8}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"sale.length","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":19,"line":11},"start":{"column":7,"line":11}}},{"id":"170","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":19,"line":11},"start":{"column":7,"line":11}}},{"id":"171","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27"],"location":{"end":{"column":19,"line":11},"start":{"column":7,"line":11}}},{"id":"172","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27"],"location":{"end":{"column":93,"line":11},"start":{"column":21,"line":11}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":2,"line":32},"start":{"column":37,"line":16}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":40,"line":19},"start":{"column":7,"line":19}}},{"id":"182","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["29"],"location":{"end":{"column":40,"line":19},"start":{"column":7,"line":19}}},{"id":"193","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":2,"line":40},"start":{"column":39,"line":34}}},{"id":"194","mutatorName":"BooleanLiteral","replacement":"sale.length","statusReason":"expected 'NOT_FOUND' to equal 'DELETED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":19,"line":36},"start":{"column":7,"line":36}}},{"id":"195","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'DELETED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":19,"line":36},"start":{"column":7,"line":36}}},{"id":"196","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["28"],"location":{"end":{"column":19,"line":36},"start":{"column":7,"line":36}}}],"source":"const { salesModel, productsModel } = require('../models');\n\nconst allSales = async () => {\n  const sales = await salesModel.getAllSales();\n  return { status: 'SUCCESSFUL', data: sales };\n};\n\nconst salesById = async (saleId) => {\n  const sale = await salesModel.getSalesById(saleId);\n\n  if (!sale.length) { return { status: 'NOT_FOUND', data: { message: 'Sale not found' } }; }\n\n  return { status: 'SUCCESSFUL', data: sale };\n};\n\nconst salesCreate = async (sale) => {\n  const products = sale.map(({ productId }) => productsModel.getById(productId));\n  const productsFound = await Promise.all(products);\n  if (productsFound.includes(undefined)) {\n    return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  }\n  const saleId = await salesModel.createSale(sale);\n  const sales = await salesModel.getSalesById(saleId);\n  const soldItem = {\n    id: saleId,\n    itemsSold: sales.map((item) => ({\n      productId: item.productId,\n      quantity: item.quantity,\n    })),\n  };\n  return { status: 'CREATED', data: soldItem };\n};\n\nconst salesDelete = async (saleId) => {\n  const sale = await salesModel.getSalesById(saleId);\n  if (!sale.length) { return { status: 'NOT_FOUND', data: { message: 'Sale not found' } }; }\n\n  await salesModel.deleteSale(saleId);\n  return { status: 'DELETED', data: null };\n};\n\nmodule.exports = {\n  allSales,\n  salesById,\n  salesCreate,\n  salesDelete,\n};\n"},"src/controllers/index.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsController = require('./products.controller');\nconst salesController = require('./sales.controller');\n\nmodule.exports = {\n  productsController,\n  salesController,\n};"},"src/controllers/products.controller.js":{"language":"javascript","mutants":[{"id":"6","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":44},"start":{"column":18,"line":38}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":2,"line":14},"start":{"column":37,"line":9}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":2,"line":21},"start":{"column":40,"line":16}}},{"id":"4","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":2,"line":29},"start":{"column":43,"line":23}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":36},"start":{"column":43,"line":31}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":7},"start":{"column":37,"line":4}}}],"source":"const productService = require('../services/products.service');\nconst mapStatusHTTP = require('../utils/mapStatusHTTP');\n\nconst findAll = async (req, res) => {\n  const { status, data } = await productService.getAll();\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst getById = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await productService.findById(id);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst addProduct = async (req, res) => {\n  const { name } = req.body;\n  const { status, data } = await productService.addProduct(name);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst updateProduct = async (req, res) => {\n  const { id } = req.params;\n  const { name } = req.body;\n  const { status, data } = await productService.updateProduct(id, name);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst deleteProduct = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await productService.deleteProduct(id);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nmodule.exports = {\n  findAll,\n  getById,\n  addProduct,\n  updateProduct,\n  deleteProduct,\n};"},"src/controllers/sales.controller.js":{"language":"javascript","mutants":[{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":35},"start":{"column":18,"line":30}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":2,"line":7},"start":{"column":48,"line":4}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":2,"line":14},"start":{"column":49,"line":9}}},{"id":"9","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7"],"location":{"end":{"column":2,"line":21},"start":{"column":51,"line":16}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 204","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":2,"line":28},"start":{"column":51,"line":23}}}],"source":"const salesServices = require('../services/sales.service');\nconst mapStatusHTTP = require('../utils/mapStatusHTTP');\n\nconst allSalesController = async (req, res) => {\n  const { status, data } = await salesServices.allSales();\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst salesByIdController = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await salesServices.salesById(id);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst salesCreateController = async (req, res) => {\n  const sales = req.body;\n  const { status, data } = await salesServices.salesCreate(sales);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst salesDeleteController = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await salesServices.salesDelete(id);\n\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nmodule.exports = {\n  allSalesController,\n  salesByIdController,\n  salesCreateController,\n  salesDeleteController,\n};"},"src/middlewares/index.js":{"language":"javascript","mutants":[{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":5},"start":{"column":18,"line":3}}}],"source":"const products = require('./productValidation');\n\nmodule.exports = {\n  products,\n};"},"src/middlewares/validations/schema.js":{"language":"javascript","mutants":[{"id":"43","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":5},"start":{"column":34,"line":3}}},{"id":"44","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":13,"line":5}}},{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":6},"start":{"column":19,"line":6}}},{"id":"46","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":7},"start":{"column":19,"line":7}}},{"id":"47","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":8},"start":{"column":17,"line":8}}},{"id":"48","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":14},"start":{"column":31,"line":11}}},{"id":"49","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":19},"start":{"column":13,"line":14}}},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":15},"start":{"column":19,"line":15}}},{"id":"51","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":16},"start":{"column":19,"line":16}}},{"id":"52","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":17},"start":{"column":17,"line":17}}},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":52,"line":18},"start":{"column":21,"line":18}}},{"id":"54","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":24},"start":{"column":18,"line":21}}}],"source":"const joi = require('joi');\n\nconst productSchema = joi.object({\n  name: joi.string().min(5).required(),\n}).messages({\n  'any.required': '{{#label}} is required',\n  'string.empty': '{{#label}} is not allowed to be empty',\n  'string.min': '{{#label}} length must be at least 5 characters long',\n});\n\nconst saleSchema = joi.object({\n  productId: joi.number().integer().required(),\n  quantity: joi.number().integer().min(1).required(),\n}).messages({\n  'any.required': '{{#label}} is required',\n  'number.empty': '{{#label}} is not allowed to be empty',\n  'number.min': '{{#label}} must be greater than or equal to 1',\n  'number.integer': '{{#label}} must be an integer',\n});\n\nmodule.exports = {\n  productSchema,\n  saleSchema,\n};"},"src/models/connection.js":{"language":"javascript","mutants":[{"id":"64","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":37,"line":3}}},{"id":"65","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":4},"start":{"column":9,"line":4}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":4},"start":{"column":9,"line":4}}},{"id":"67","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_HOSTNAME && 'localhost'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":4},"start":{"column":9,"line":4}}},{"id":"68","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":4},"start":{"column":39,"line":4}}},{"id":"69","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":5},"start":{"column":9,"line":5}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":5},"start":{"column":9,"line":5}}},{"id":"71","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PORT && 3306","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":5},"start":{"column":9,"line":5}}},{"id":"72","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":6},"start":{"column":9,"line":6}}},{"id":"74","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_USER && 'root'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":6},"start":{"column":9,"line":6}}},{"id":"75","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":6},"start":{"column":35,"line":6}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":7},"start":{"column":13,"line":7}}},{"id":"77","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":7},"start":{"column":13,"line":7}}},{"id":"78","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PASSWORD && 'password'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":7},"start":{"column":13,"line":7}}},{"id":"79","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":7},"start":{"column":43,"line":7}}},{"id":"80","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":27,"line":8},"start":{"column":13,"line":8}}}],"source":"const mysql = require('mysql2/promise');\n\nconst connection = mysql.createPool({\n  host: process.env.MYSQL_HOSTNAME || 'localhost',\n  port: process.env.MYSQL_PORT || 3306,\n  user: process.env.MYSQL_USER || 'root',\n  password: process.env.MYSQL_PASSWORD || 'password',\n  database: 'StoreManager',\n});\n\nmodule.exports = connection;"},"src/models/index.js":{"language":"javascript","mutants":[{"id":"81","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsModel = require('./products.model');\nconst salesModel = require('./sales.model');\n\nmodule.exports = {\n  productsModel,\n  salesModel,\n};"},"src/models/products.model.js":{"language":"javascript","mutants":[{"id":"83","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":4},"start":{"column":17,"line":4}}},{"id":"85","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":54,"line":11},"start":{"column":17,"line":11}}},{"id":"86","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":59,"line":12},"start":{"column":55,"line":12}}},{"id":"88","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":56,"line":18},"start":{"column":17,"line":18}}},{"id":"89","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":19},"start":{"column":58,"line":19}}},{"id":"91","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":60,"line":24},"start":{"column":17,"line":24}}},{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":25},"start":{"column":35,"line":25}}},{"id":"94","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":52,"line":31},"start":{"column":17,"line":31}}},{"id":"95","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":32},"start":{"column":60,"line":32}}},{"id":"96","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":42},"start":{"column":18,"line":36}}},{"id":"82","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":2,"line":8},"start":{"column":28,"line":3}}},{"id":"84","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","12","23","29"],"location":{"end":{"column":2,"line":15},"start":{"column":31,"line":10}}},{"id":"87","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be a number","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11"],"location":{"end":{"column":2,"line":21},"start":{"column":36,"line":17}}},{"id":"90","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":2,"line":28},"start":{"column":43,"line":23}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'affectedRows')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":2,"line":34},"start":{"column":37,"line":30}}}],"source":"const connection = require('./connection');\n\nconst getAll = async () => {\n  const QUERY = 'SELECT * FROM products';\n  const [products] = await connection.execute(QUERY);\n\n  return products;\n};\n\nconst getById = async (id) => {\n  const QUERY = 'SELECT * FROM products WHERE id = ?';\n  const [[product]] = await connection.execute(QUERY, [id]);\n\n  return product;\n};\n\nconst addProduct = async (name) => {\n  const QUERY = 'INSERT INTO products (name) VALUE (?)';\n  const [{ insertId }] = await connection.execute(QUERY, [name]);\n  return insertId;\n};\n\nconst updateProduct = async (id, name) => {\n  const QUERY = 'UPDATE products SET name = ? WHERE id = ?';\n  await connection.execute(QUERY, [name, id]);\n  const productUpdated = await getById(id);\n  return productUpdated;\n};\n\nconst deleteProduct = async (id) => {\n  const QUERY = 'DELETE FROM products WHERE id = ?';\n  const [productDeleted] = await connection.execute(QUERY, [id]);\n  return productDeleted;\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  addProduct,\n  updateProduct,\n  deleteProduct,\n};"},"src/routes/index.js":{"language":"javascript","mutants":[{"id":"112","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsRouter = require('./productsRouter.route');\nconst salesRouter = require('./salesRouter.route');\n\nmodule.exports = {\n  productsRouter,\n  salesRouter,\n};"},"src/routes/productsRouter.route.js":{"language":"javascript","mutants":[{"id":"113","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":7},"start":{"column":12,"line":7}}},{"id":"114","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":8},"start":{"column":12,"line":8}}},{"id":"115","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":9},"start":{"column":13,"line":9}}},{"id":"116","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":10},"start":{"column":12,"line":10}}},{"id":"117","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":21,"line":11},"start":{"column":15,"line":11}}}],"source":"const express = require('express');\nconst { productsController } = require('../controllers');\nconst { productValidation } = require('../middlewares/productValidation');\n\nconst router = express.Router();\n\nrouter.get('/', productsController.findAll);\nrouter.get('/:id', productsController.getById);\nrouter.post('/', productValidation, productsController.addProduct);\nrouter.put('/:id', productValidation, productsController.updateProduct);\nrouter.delete('/:id', productsController.deleteProduct);\n\nmodule.exports = router;"},"src/routes/salesRouter.route.js":{"language":"javascript","mutants":[{"id":"118","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":7},"start":{"column":12,"line":7}}},{"id":"119","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":8},"start":{"column":12,"line":8}}},{"id":"120","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":9},"start":{"column":13,"line":9}}},{"id":"121","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":21,"line":10},"start":{"column":15,"line":10}}}],"source":"const express = require('express');\nconst { salesController } = require('../controllers');\nconst { saleValidation } = require('../middlewares/saleValidation');\n\nconst router = express.Router();\n\nrouter.get('/', salesController.allSalesController);\nrouter.get('/:id', salesController.salesByIdController);\nrouter.post('/', saleValidation, salesController.salesCreateController);\nrouter.delete('/:id', salesController.salesDeleteController);\n\nmodule.exports = router;\n"},"src/services/index.js":{"language":"javascript","mutants":[{"id":"122","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productServices = require('./products.service');\nconst salesServices = require('./sales.service');\n\nmodule.exports = {\n  salesServices,\n  productServices,\n};"},"src/utils/mapStatusHTTP.js":{"language":"javascript","mutants":[{"id":"205","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":22,"line":1}}},{"id":"206","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":62,"line":11},"start":{"column":23,"line":11}}},{"id":"207","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\ntrue 200 ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8"],"location":{"end":{"column":62,"line":11},"start":{"column":35,"line":11}}},{"id":"208","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 200\nfalse 200 ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8"],"location":{"end":{"column":62,"line":11},"start":{"column":35,"line":11}}},{"id":"209","mutatorName":"LogicalOperator","replacement":"httpErrorMap[status] && 500","statusReason":"expected status to have been called with arguments 200\n500 200 ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8"],"location":{"end":{"column":62,"line":11},"start":{"column":35,"line":11}}}],"source":"const httpErrorMap = {\n    SUCCESSFUL: 200,\n    CREATED: 201,\n    NOT_FOUND: 404,\n    CONFLICT: 409,\n    INVALID_VALUE: 422,\n    BAD_REQUEST: 400,\n    DELETED: 204,\n};\n\nconst mapStatusHTTP = (status) => httpErrorMap[status] || 500;\n\nmodule.exports = mapStatusHTTP;"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"tests/unit/controllers/products.controller.test.js":{"tests":[{"id":"0","name":"Controller of Products Should return a list of products"},{"id":"1","name":"Controller of Products Should return a product by id"},{"id":"2","name":"Controller of Products Should add a product"},{"id":"3","name":"Controller of Products Should update a product"},{"id":"4","name":"Controller of Products Should delete a product"}],"source":"const sinon = require('sinon');\nconst chai = require('chai');\nconst sinonChai = require('sinon-chai');\n\nconst { expect } = chai;\nconst { mockProducts } = require('../mocks');\nconst { productServices } = require('../../../src/services');\nconst { productsController } = require('../../../src/controllers');\n\nchai.use(sinonChai);\n\ndescribe('Controller of Products', function () {\n  it('Should return a list of products', async function () {\n    sinon\n      .stub(productServices, 'getAll')\n      .resolves(mockProducts.allProductsFromServiceSuccessful);\n\n    const req = {};\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productsController.findAll(req, res);\n\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith([\n      { id: 1, name: 'Martelo de Thor' },\n      { id: 2, name: 'Traje de encolhimento' },\n      { id: 3, name: 'Escudo do Capitão América' },\n    ]);\n  });\n  it('Should return a product by id', async function () {\n    sinon.stub(productServices, 'findById').resolves(mockProducts.productFromModelSucessful);\n\n    const req = { params: { id: 1 } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productsController.getById(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(mockProducts.productFromModel);\n  });\n  it('Should add a product', async function () {\n    sinon.stub(productServices, 'addProduct').resolves(mockProducts.productFromModelSucessful);\n    const req = { body: { name: 'Martelo de Thor' } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productsController.addProduct(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(mockProducts.productFromModel);\n  });\n  it('Should update a product', async function () {\n    sinon.stub(productServices, 'updateProduct').resolves(mockProducts.productFromModelSucessful);\n    const req = { body: { name: 'Martelo de Thor' }, params: { id: 1 } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productsController.updateProduct(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(mockProducts.productFromModel);\n  });\n  it('Should delete a product', async function () {\n    sinon.stub(productServices, 'deleteProduct').resolves(mockProducts.productFromModelSucessful);\n    const req = { params: { id: 1 } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productsController.deleteProduct(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(mockProducts.productFromModel);\n  });\n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/controllers/sales.controller.test.js":{"tests":[{"id":"5","name":"Controller of Sales Should return a list of sales"},{"id":"6","name":"Controller of Sales Should return sales by id"},{"id":"7","name":"Controller of Sales Should add a new sale"},{"id":"8","name":"Controller of Sales Should delete a sale"}],"source":"const sinon = require('sinon');\nconst chai = require('chai');\nconst { salesServices } = require('../../../src/services');\nconst { salesMockSuccess, salesById, salesMock } = require('../mocks/sales.mock');\nconst { salesByIdController, allSalesController, salesCreateController, salesDeleteController } = require('../../../src/controllers/sales.controller');\n\nconst { expect } = chai;\n\ndescribe('Controller of Sales', function () {\n  it('Should return a list of sales', async function () {\n    sinon.stub(salesServices, 'allSales').resolves({ status: 'SUCCESSFUL', data: salesMock });\n\n    const req = {};\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await allSalesController(req, res);\n    \n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(salesMock);\n  });\n  \n  it('Should return sales by id', async function () {\n    sinon.stub(salesServices, 'salesById').resolves({ status: 'SUCCESSFUL', data: salesById });\n\n    const req = {\n      params: {\n        id: 1,\n      },\n    };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await salesByIdController(req, res);\n\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(salesById);\n  });\n\n  it('Should add a new sale', async function () {\n    sinon.stub(salesServices, 'salesCreate').resolves({ status: 'CREATED', data: salesMockSuccess });\n\n    const req = {\n      body: salesMockSuccess,\n    };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await salesCreateController(req, res);\n\n    expect(res.status).to.have.been.calledWith(201);\n    expect(res.json).to.have.been.calledWith(salesMockSuccess);\n  });\n\n  it('Should delete a sale', async function () {\n    sinon.stub(salesServices, 'salesDelete').resolves({ status: 'DELETED', data: null });\n\n    const req = {\n      params: {\n        id: 1,\n      },\n    };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await salesDeleteController(req, res);\n\n    expect(res.status).to.have.been.calledWith(204);\n    expect(res.json).to.have.been.calledWith(null);\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/models/products.model.test.js":{"tests":[{"id":"9","name":"Model of Products Should return a list of products"},{"id":"10","name":"Model of Products Should return a product by ID"},{"id":"11","name":"Model of Products Should test addProduct function from model"},{"id":"12","name":"Model of Products Should test updateProduct function from model"},{"id":"13","name":"Model of Products Should delete a product by ID"}],"source":"const chai = require('chai');\n// const sinonChai = require('sinon-chai');\nconst sinon = require('sinon');\n\nconst { expect } = chai;\nconst mockProducts = require('../mocks');\nconst connection = require('../../../src/models/connection');\nconst { productsModel } = require('../../../src/models');\n\ndescribe('Model of Products', function () {\n  const { productFromDB, allProductsFromDB } = mockProducts.mockProducts;\n\n  it('Should return a list of products', async function () {\n    sinon.stub(connection, 'execute').resolves([allProductsFromDB]);\n    const products = await productsModel.getAll();\n    expect(products).to.be.an('array');\n    expect(products[0]).to.be.an('object');\n    expect(products).to.be.equal(allProductsFromDB);\n  });\n\n  it('Should return a product by ID', async function () {\n    sinon.stub(connection, 'execute').resolves([[productFromDB]]);\n    const product = await productsModel.getById(1);\n    expect(product).to.be.an('object');\n    expect(product).to.be.equal(productFromDB);\n  });\n\n  it('Should test addProduct function from model', async function () {\n    const productName = 'Product Test';\n    sinon.stub(connection, 'execute').resolves([{ insertId: 1 }]);\n\n    const insertId = await productsModel.addProduct(productName);\n    expect(insertId).to.be.a('number');\n  });\n\n  it('Should test updateProduct function from model', async function () {\n    sinon.stub(connection, 'execute').resolves([[productFromDB]]);\n    const product = await productsModel.updateProduct(1, 'Product Test');\n    expect(product).to.be.an('object');\n    expect(product).to.be.equal(productFromDB);\n  });\n\n  it('Should delete a product by ID', async function () {\n    sinon.stub(connection, 'execute').resolves([{ affectedRows: 1 }]);\n\n    const product = await productsModel.deleteProduct(1);\n\n    expect(product.affectedRows).to.be.deep.equal(1);\n  });\n\n  afterEach(function () {\n    sinon.restore();  \n    });  \n});"},"tests/unit/models/sales.model.test.js":{"tests":[{"id":"14","name":"Model of Sales Should return a list of sales"},{"id":"15","name":"Model of Sales Should return a sale by ID"},{"id":"16","name":"Model of Sales Should delete a sale by ID"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst connection = require('../../../src/models/connection');\nconst { salesModel } = require('../../../src/models'); \nconst { addSalesMock } = require('../mocks/sales.mock');\n\nconst { expect } = chai;\n\ndescribe('Model of Sales', function () {\n  it('Should return a list of sales', async function () {\n    sinon.stub(connection, 'execute').resolves([addSalesMock]);\n    const sales = await salesModel.getAllSales();\n    expect(sales).to.be.an('array');\n  });\n\n  it('Should return a sale by ID', async function () {\n    const saleId = 1; \n    sinon.stub(connection, 'execute').resolves([addSalesMock]); \n    const sale = await salesModel.getSalesById(saleId);\n    expect(sale).to.be.an('array');\n  });\n\n  it('Should delete a sale by ID', async function () {\n    sinon.stub(connection, 'execute').resolves([{ affectedRows: 1 }]);\n\n    const sale = await salesModel.deleteSale(1);\n\n    expect(sale.affectedRows).to.be.deep.equal(1);\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/services/products.service.test.js":{"tests":[{"id":"17","name":"Service of Products Should return a list of products"},{"id":"18","name":"Service of Products Should return an error when product is not found"},{"id":"19","name":"Service of Products Should return SUCCESSFUL message "},{"id":"20","name":"Service of Products Should return CREATED message"},{"id":"21","name":"Service of Products Should not delete sold out product"},{"id":"22","name":"Service of Products Should update product"},{"id":"23","name":"Service of Products Should return DELETED message"},{"id":"24","name":"Service of Products Should return NOT_FOUND message when product does not exist"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\n\nconst { expect } = chai;\nconst mockProducts = require('../mocks');\nconst { productsModel } = require('../../../src/models');\nconst { productServices } = require('../../../src/services');\n\ndescribe('Service of Products', function () {\n  it('Should return a list of products', async function () {\n    sinon\n      .stub(productsModel, 'getAll')\n      .resolves(mockProducts.allProductsFromDB);\n\n    const products = await productServices.getAll();\n\n    expect(products.status).to.be.equal('SUCCESSFUL');\n    expect(products.data).to.be.deep.equal(mockProducts.allProductsFromDB);\n  });\n\n  it('Should return an error when product is not found', async function () {\n    sinon.stub(productsModel, 'getById').resolves(mockProducts.productNotFound);\n\n    const product = await productServices.findById(1);\n\n    expect(product.status).to.be.equal('NOT_FOUND');\n    expect(product.data.message).to.be.equal('Product not found');\n  });\n\n  it('Should return SUCCESSFUL message ', async function () {\n    sinon.stub(productsModel, 'getById').resolves(mockProducts.mockProducts.productFromModel);\n\n    const product = await productServices.findById(1);\n\n    expect(product.status).to.be.equal('SUCCESSFUL');\n  });\n\n  it('Should return CREATED message', async function () {\n    sinon.stub(productsModel, 'addProduct').resolves(mockProducts.mockProducts.productFromModel);\n    sinon.stub(productsModel, 'getById').resolves(mockProducts.mockProducts.productFromModel);\n\n    const product = await productServices.addProduct('Product');\n\n    expect(product.status).to.be.equal('CREATED');\n  });\n\n  it('Should not delete sold out product', async function () {\n    sinon.stub(productsModel, 'getById').resolves(undefined);\n\n    const product = await productServices.deleteProduct(21);\n\n    expect(product.status).to.be.equal('NOT_FOUND');\n    expect(product.data.message).to.be.equal('Product not found');\n  });\n\n  it('Should update product', async function () {\n    sinon.stub(productsModel, 'getById').resolves(mockProducts.mockProducts.productFromModel);\n    sinon.stub(productsModel, 'updateProduct').resolves(mockProducts.mockProducts.productFromModel);\n\n    const product = await productServices.updateProduct(1, 'Product');\n\n    expect(product.status).to.be.equal('SUCCESSFUL');\n  });\n\n  it('Should return DELETED message', async function () {\n    sinon.stub(productsModel, 'deleteProduct').resolves(mockProducts.mockProducts.productDeleted);\n\n    const product = await productServices.deleteProduct(1);\n\n    expect(product.status).to.be.equal('DELETED');\n  });\n\n  // verificar o que está sendo testado nesse it abaixo! \n  // it('Should check if product exists', async function () {\n  //   sinon.stub(productsModel, 'getById').resolves(mockProducts.mockProducts.productFromModel);\n\n  //   const product = await productServices.findById(1);\n\n  //   expect(product.status).to.be.equal('SUCCESSFUL');\n  // });\n\n  it('Should return NOT_FOUND message when product does not exist', async function () {\n    sinon.stub(productsModel, 'getById').resolves(undefined);\n\n    const product = await productServices.findById(1);\n\n    expect(product.status).to.be.equal('NOT_FOUND');\n    expect(product.data.message).to.be.equal('Product not found');\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/services/sales.service.test.js":{"tests":[{"id":"25","name":"Service of Sales Should return a list of sales"},{"id":"26","name":"Service of Sales Should return a sale by id"},{"id":"27","name":"Service of Sales Should return an error when sale is not found"},{"id":"28","name":"Service of Sales Should delete a sale"},{"id":"29","name":"Service of Sales Should create a sale"}],"source":"const { expect } = require('chai');\nconst sinon = require('sinon');\nconst { salesModel } = require('../../../src/models');\n\nconst { salesServices } = require('../../../src/services');\nconst { mockSales } = require('../mocks');\n\ndescribe('Service of Sales', function () {\n  it('Should return a list of sales', async function () {\n    sinon.stub(salesModel, 'getAllSales').resolves(mockSales.salesMock);\n\n    const sales = await salesServices.allSales();\n\n    expect(sales.status).to.be.equal('SUCCESSFUL');\n    expect(sales.data).to.be.deep.equal(mockSales.salesMock);\n  });\n\n  it('Should return a sale by id', async function () {\n    sinon.stub(salesModel, 'getSalesById').resolves(mockSales.salesById);\n\n    const sale = await salesServices.salesById(2);\n\n    expect(sale.status).to.be.equal('SUCCESSFUL');\n    expect(sale.data).to.be.deep.equal(mockSales.salesById);\n  });\n\n  it('Should return an error when sale is not found', async function () {\n    sinon.stub(salesModel, 'getSalesById').resolves(mockSales.salesNotFound);\n\n    const sale = await salesServices.salesById(2);\n\n    expect(sale.status).to.be.equal('NOT_FOUND');\n    expect(sale.data.message).to.be.equal('Sale not found');\n  });\n\n  it('Should delete a sale', async function () {\n    sinon.stub(salesModel, 'getSalesById').resolves(mockSales.salesById);\n    sinon.stub(salesModel, 'deleteSale').resolves();\n\n    const sale = await salesServices.salesDelete(2);\n\n    expect(sale.status).to.be.equal('DELETED');\n    expect(sale.data).to.be.equal(null);\n  });\n\n  it('Should create a sale', async function () {\n    sinon.stub(salesModel, 'getSalesById').resolves(mockSales.salesById);\n    sinon.stub(salesModel, 'createSale').resolves(3);\n\n    const sale = await salesServices.salesCreate(mockSales.salesMock);\n\n    expect(sale.status).to.be.equal('CREATED');\n    expect(sale.data.id).to.be.equal(3);\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"}},"projectRoot":"/home/yago/Trybe-Projetos/Back-End/Trybe-Projeto-05/sd-031-b-store-manager/backend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","json","progress"],"mutate":["src/**/*.js","!src/{app,server}.js"],"mutator":{"excludedMutations":["StringLiteral","ObjectLiteral","ArrayDeclaration","ArrowFunction"],"plugins":null},"testRunner":"mocha","coverageAnalysis":"perTest","ignoreStatic":true,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"6.4.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"6.4.2","mocha":"10.2.0"}}}